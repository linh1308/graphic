{
  "version": 3,
  "sources": ["../three/examples/jsm/geometries/ParametricGeometries.js"],
  "sourcesContent": ["import {\n\tCurve,\n\tParametricGeometry,\n\tVector3\n} from 'three';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n\n\tklein: function ( v, u, target ) {\n\n\t\tu *= Math.PI;\n\t\tv *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tlet x, z;\n\t\tif ( u < Math.PI ) {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t\t} else {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\t\tz = - 8 * Math.sin( u );\n\n\t\t}\n\n\t\tconst y = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tplane: function ( width, height ) {\n\n\t\treturn function ( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * height;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t};\n\n\t},\n\n\tmobius: function ( u, t, target ) {\n\n\t\t// flat mobius strip\n\t\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\t\tu = u - 0.5;\n\t\tconst v = 2 * Math.PI * t;\n\n\t\tconst a = 2;\n\n\t\tconst x = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst y = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst z = u * Math.sin( v / 2 );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tmobius3d: function ( u, t, target ) {\n\n\t\t// volumetric mobius strip\n\n\t\tu *= Math.PI;\n\t\tt *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tconst phi = u / 2;\n\t\tconst major = 2.25, a = 0.125, b = 0.65;\n\n\t\tlet x = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\t\tconst z = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\t\tconst y = ( major + x ) * Math.sin( u );\n\t\tx = ( major + x ) * Math.cos( u );\n\n\t\ttarget.set( x, y, z );\n\n\t}\n\n};\n\n\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n\n\tconstructor( path, segments = 64, radius = 1, segmentsRadius = 8, closed = false ) {\n\n\t\tconst numpoints = segments + 1;\n\n\t\tconst frames = path.computeFrenetFrames( segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\n\t\tconst position = new Vector3();\n\n\t\tfunction ParametricTube( u, v, target ) {\n\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tconst i = Math.floor( u * ( numpoints - 1 ) );\n\n\t\t\tpath.getPointAt( u, position );\n\n\t\t\tconst normal = normals[ i ];\n\t\t\tconst binormal = binormals[ i ];\n\n\t\t\tconst cx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tconst cy = radius * Math.sin( v );\n\n\t\t\tposition.x += cx * normal.x + cy * binormal.x;\n\t\t\tposition.y += cx * normal.y + cy * binormal.y;\n\t\t\tposition.z += cx * normal.z + cy * binormal.z;\n\n\t\t\ttarget.copy( position );\n\n\t\t}\n\n\t\tsuper( ParametricTube, segments, segmentsRadius );\n\n\t\t// proxy internals\n\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\tthis.path = path;\n\t\tthis.segments = segments;\n\t\tthis.radius = radius;\n\t\tthis.segmentsRadius = segmentsRadius;\n\t\tthis.closed = closed;\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for TorusKnotGeometry\n  *\n  *********************************************/\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n\n\tconstructor( radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3 ) {\n\n\t\tclass TorusKnotCurve extends Curve {\n\n\t\t\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\t\t\tconst point = optionalTarget;\n\n\t\t\t\tt *= Math.PI * 2;\n\n\t\t\t\tconst r = 0.5;\n\n\t\t\t\tconst x = ( 1 + r * Math.cos( q * t ) ) * Math.cos( p * t );\n\t\t\t\tconst y = ( 1 + r * Math.cos( q * t ) ) * Math.sin( p * t );\n\t\t\t\tconst z = r * Math.sin( q * t );\n\n\t\t\t\treturn point.set( x, y, z ).multiplyScalar( radius );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst segments = segmentsT;\n\t\tconst radiusSegments = segmentsR;\n\t\tconst extrudePath = new TorusKnotCurve();\n\n\t\tsuper( extrudePath, segments, tube, radiusSegments, true, false );\n\n\t\tthis.radius = radius;\n\t\tthis.tube = tube;\n\t\tthis.segmentsT = segmentsT;\n\t\tthis.segmentsR = segmentsR;\n\t\tthis.p = p;\n\t\tthis.q = q;\n\n\t}\n\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for SphereGeometry\n  *\n  *********************************************/\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n\n\tconstructor( size, u, v ) {\n\n\t\tfunction sphere( u, v, target ) {\n\n\t\t\tu *= Math.PI;\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tvar x = size * Math.sin( u ) * Math.cos( v );\n\t\t\tvar y = size * Math.sin( u ) * Math.sin( v );\n\t\t\tvar z = size * Math.cos( u );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( sphere, u, v );\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for PlaneGeometry\n  *\n  *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n\n\tconstructor( width, depth, segmentsWidth, segmentsDepth ) {\n\n\t\tfunction plane( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * depth;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( plane, segmentsWidth, segmentsDepth );\n\n\t}\n\n};\n\nexport { ParametricGeometries };\n"],
  "mappings": "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",
  "names": []
}
